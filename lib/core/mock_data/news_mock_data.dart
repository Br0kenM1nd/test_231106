abstract class NewsMockData {
  static const content = '''Переход на Dart 3
Важнейшей частью в достижении надежной null-безопасности была непоколебимая поддержка со стороны сообщества Dart: 99% из 1000 лучших пакетов на pub.dev поддерживают нулевую безопасность!

Учитывая это, мы ожидаем, что подавляющее большинство пакетов и приложений, которые были перенесены в нулевую безопасность, будут работать с Dart 3. Всего в нескольких случаях небольшое количество сопутствующей очистки в Dart 3 может повлиять на некоторый код. Некоторые устаревшие API-интерфейсы core библиотеки были удалены (#34233, #49529), а некоторые инструменты были скорректированы (#50707). Если у вас возникнут проблемы с переходом на Dart 3 SDK, обратитесь к руководству по переходу на Dart 3. Кроме того, мы надеемся, что вам понравятся новые рационализированные core библиотеки и инструменты.

Мажорные возможности языка – Record, patterns, class modifiers
Dart 3 – это не просто изменение существующего языка. Речь также идет о добавлении новых значительных функций и возможностей! К ним относятся записи, паттерны и модификаторы классов.

Построение структурированных данных с помощью records
Традиционно функция Dart могла возвращать только одно значение. В результате функции, которые должны были возвращать несколько значений, должны были либо упаковывать их в другие типы данных, такие как карты или списки, либо определять новые классы, которые могли бы хранить эти значения. Использование нетипизированных структур данных ослабляет безопасность типов. Необходимость определять новые классы только для переноса данных создает дополнительные трудности в процессе программирования. Вы довольно ясно дали нам это понять: языковой запрос о множественных возвращаемых значениях – четвертый по рейтингу вопрос.

С помощью records вы можете создавать структурированные данные с красивым и четким синтаксисом. Рассмотрим эту функцию. Он считывает имя и возраст из JSON-блоба и возвращает их в записи:''';
}